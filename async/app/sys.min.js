const System = async (token,botid)=>{
   const Deployer = async (t,i)=>{
    const { REST } = require('@discordjs/rest');
    const { Routes } = require('discord.js');
    const commands = [];
    const commandsPath = path.join(__dirname, 'commands');
    const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
for (const file of commandFiles) {
	const filePath = path.join(commandsPath, file);
	const command = require(filePath);
	await commands.push(command.data.toJSON());
}
    const rest = new REST({ version: '10' }).setToken(t);
    await rest.put(Routes.applicationCommand(i), { body: commands })
	.then(data => console.log(`[System:Bot]: Successfully registered ${data.length} application commands.`))
	.catch(console.error);    
   }
   await Deployer(token,botid);
   const Bot = async (t) => {
    const fs = require('node:fs');
    const path = require('node:path');
    const { Client, Collection, GatewayIntentBits } = require('discord.js');
    const client = new Client({ intents: [GatewayIntentBits.Guilds] });
    client.commands = new Collection();
    const commandsPath = path.join(__dirname, './app/data/commands');
    const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
    for (const file of commandFiles) {
	    const filePath = path.join(commandsPath, file);
	    const command = require(filePath);
        client.commands.set(command.data.name, command);
    }
    const eventsPath = path.join(__dirname, './app/data/events');
    const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));

    for (const file of eventFiles) {
	    const filePath = path.join(eventsPath, file);
	    const event = require(filePath);
	    if (event.once) {
		    client.once(event.name, (...args) => event.execute(...args));
	    } else {
		    client.on(event.name, (...args) => event.execute(...args));
	    }
    }
    client.on('interactionCreate', async interaction => {
        if (!interaction.isChatInputCommand()) return;
        const command = interaction.client.commands.get(interaction.commandName);
        if (!command) return;
        try {
            await command.execute(interaction);
        } catch (error) {
            console.error(error);
            await interaction.reply({ content: 'There was an error while executing this command!', ephemeral: true });
        }
    });

   }
}
module.exports = {
    System
}